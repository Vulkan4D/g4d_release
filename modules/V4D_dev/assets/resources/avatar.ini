[MESH_FILES]
avatar = "modules/V4D_dev/assets/resources/avatar.glb"

[CAMERA]
TRANSFORM_NODE = avatar "camera"
PARENT_JOINT = neck


###########################################
# Joints

[JOINT spine]
TRANSFORM_NODE = avatar "spine"
ANGULAR_X = 12 0 -22 ; - to pitch backward, + to pitch forward
ANGULAR_Y = -12 0 12 ; - to roll left, + to roll right
ANGULAR_Z = 12 0 -12 ; - to yaw left, + to yaw right

[JOINT neck]
TRANSFORM_NODE = avatar "neck"
PARENT = spine
ANGULAR_X = 30 0 -15 ; - to pitch up, + to pitch down
ANGULAR_Z = 50 0 -50 ; - to yaw left, + to yaw right
; ANGULAR_Y = -10 0 10 ; - to roll left, + to roll right

[JOINT r_shoulder]
TRANSFORM_NODE = avatar "r_shoulder"
PARENT = spine
ANGULAR_Y = 85 80 -10 ; - for arm down, + for arm up
ANGULAR_X = 0 0 85 ; XZ locked together, + for arm forward
ANGULAR_Z = -50 0 85

[JOINT l_shoulder]
TRANSFORM_NODE = avatar "l_shoulder"
PARENT = spine
ANGULAR_Y = -85 -80 10 ; - for arm down, + for arm up
ANGULAR_X = 0 0 85 ; XZ locked together, + for arm forward
ANGULAR_Z = 50 0 -85

[JOINT r_elbow]
TRANSFORM_NODE = avatar "r_elbow"
PARENT = r_shoulder
ANGULAR_Z = 0 15 100 ; + to bend elbow

[JOINT l_elbow]
TRANSFORM_NODE = avatar "l_elbow"
PARENT = l_shoulder
ANGULAR_Z = 0 -15 -100 ; + to bend elbow

[JOINT r_hip]
TRANSFORM_NODE = avatar "r_hip"
ANGULAR_X = -30 0 85 ; - for backward, + for up/forward
; ANGULAR_Y = -5 0 5 ; - for split, + for inwards
; ANGULAR_Z = -15 0 15 ; - for outwards, + for inwards

[JOINT l_hip]
TRANSFORM_NODE = avatar "l_hip"
ANGULAR_X = -30 0 85 ; - for backward, + for up/forward
; ANGULAR_Y = 5 0 -5 ; - for split, + for inwards
; ANGULAR_Z = 15 0 -15 ; - for outwards, + for inwards

[JOINT r_knee]
TRANSFORM_NODE = avatar "r_knee"
PARENT = r_hip
ANGULAR_X = 0 0 -85 ; + to bend knee

[JOINT l_knee]
TRANSFORM_NODE = avatar "l_knee"
PARENT = l_hip
ANGULAR_X = 0 0 -85 ; + to bend knee

[JOINT r_ankle]
TRANSFORM_NODE = avatar "r_ankle"
PARENT = r_knee
ANGULAR_X = 25 0 -45 ; - to lift, + to push

[JOINT l_ankle]
TRANSFORM_NODE = avatar "l_ankle"
PARENT = l_knee
ANGULAR_X = 25 0 -45 ; - to lift, + to push

[JOINT r_wrist]
TRANSFORM_NODE = avatar "r_wrist"
PARENT = r_elbow
ANGULAR_X = -55 0 65 ; - for palm down, + for palm up
ANGULAR_Y = -30 0 60 ; - to point down, + to point up

[JOINT l_wrist]
TRANSFORM_NODE = avatar "l_wrist"
PARENT = l_elbow
ANGULAR_X = -55 0 65 ; + for palm down, + for palm up
ANGULAR_Y = 30 0 -60 ; - to point down, + to point up


; ###########################################
; # Inverse Kinematics

; [IK_TARGET r_foot_ik]
; TRANSFORM_NODE = avatar "r_foot_ik"
; PARENT_JOINT = r_ankle

; [IK_TARGET l_foot_ik]
; TRANSFORM_NODE = avatar "l_foot_ik"
; PARENT_JOINT = l_ankle

; [IK_TARGET r_hand_ik]
; TRANSFORM_NODE = avatar "r_hand_ik"
; PARENT_JOINT = r_wrist

; [IK_TARGET l_hand_ik]
; TRANSFORM_NODE = avatar "l_hand_ik"
; PARENT_JOINT = l_wrist


###########################################
# Renderables

[RENDERABLE root]
MESH_NODE = avatar "root"

[RENDERABLE torso]
MESH_NODE = avatar "torso"
PARENT_JOINT = spine

[RENDERABLE head]
MESH_NODE = avatar "head"
PARENT_JOINT = neck

[RENDERABLE l_upperarm]
MESH_NODE = avatar "l_upperarm"
PARENT_JOINT = l_shoulder

[RENDERABLE r_upperarm]
MESH_NODE = avatar "r_upperarm"
PARENT_JOINT = r_shoulder

[RENDERABLE l_lowerarm]
MESH_NODE = avatar "l_lowerarm"
PARENT_JOINT = l_elbow

[RENDERABLE r_lowerarm]
MESH_NODE = avatar "r_lowerarm"
PARENT_JOINT = r_elbow

[RENDERABLE l_upperleg]
MESH_NODE = avatar "l_upperleg"
PARENT_JOINT = l_hip

[RENDERABLE r_upperleg]
MESH_NODE = avatar "r_upperleg"
PARENT_JOINT = r_hip

[RENDERABLE l_lowerleg]
MESH_NODE = avatar "l_lowerleg"
PARENT_JOINT = l_knee

[RENDERABLE r_lowerleg]
MESH_NODE = avatar "r_lowerleg"
PARENT_JOINT = r_knee

[RENDERABLE l_hand]
MESH_NODE = avatar "l_hand"
PARENT_JOINT = l_wrist

[RENDERABLE r_hand]
MESH_NODE = avatar "r_hand"
PARENT_JOINT = r_wrist

[RENDERABLE l_foot]
MESH_NODE = avatar "l_foot"
PARENT_JOINT = l_ankle

[RENDERABLE r_foot]
MESH_NODE = avatar "r_foot"
PARENT_JOINT = r_ankle


###########################################
# Physics

; [RIGIDBODY]
; MASS = 100
; INERTIA_SHAPE = BOX 0.6 2.0 0.3
; BOUNDING_RADIUS = 1.25
; RESTITUTION = 0.7
; FRICTION = 0.7

###########################################
# Colliders

; [COLLIDER boxcollider]
; TRANSFORM_NODE = avatar "spine"
; SHAPE = BOX 0.6 2.0 0.3

; [COLLIDER head]
; POSITION = 0 1.75 0
; SHAPE = SPHERE 0.15
